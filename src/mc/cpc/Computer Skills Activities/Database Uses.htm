<html>

<head>
<title>Database Uses</title>
<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = Temp.substring(sLoc,z);
		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Database Uses';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question.'; //'';
var ShuffleQs = false;
var ShuffleAs = false;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 24;
var ShowOneByOne = true;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';



var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='Most database programs can perform all of the following tasks EXCEPT:';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Adding or updating data.';
I[0][1][0][1]='X';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Searching and sorting information.';
I[0][1][1][1]='X';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='Making charts and graphs.';
I[0][1][2][1]=':-)';
I[0][1][2][2] = 1;
I[0][1][3] = new Array();
I[0][1][3][0]='Printing information.';
I[0][1][3][1]='X';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='An applications program that helps organize data is:';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Word processing.';
I[1][1][0][1]='X';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='Database.';
I[1][1][1][1]=':-)';
I[1][1][1][2] = 1;
I[1][1][2] = new Array();
I[1][1][2][0]='Spreadsheet.';
I[1][1][2][1]='X';
I[1][1][2][2] = 0;
I[1][1][3] = new Array();
I[1][1][3][0]='Telecommunications.';
I[1][1][3][1]='X';
I[1][1][3][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='An advantage of a database program is:';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='You can handle all of your letters and report writing with it';
I[2][1][0][1]='X';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='You can see all fo the entries on the screen at one time';
I[2][1][1][1]='X';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='You can add, delete or edit data easily';
I[2][1][2][1]=':-)';
I[2][1][2][2] = 1;
I[2][1][3] = new Array();
I[2][1][3][0]='You never have to update a database';
I[2][1][3][1]='X';
I[2][1][3][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='A business might use a computerized database program for all of the following EXCEPT:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Maintaining a list of loyal customers.';
I[3][1][0][1]='X';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='Keeping their inventory up to date.';
I[3][1][1][1]='X';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='Keeping an appointment calendar with patients or customers.';
I[3][1][2][1]='X';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='Designing a brochure for adverising purposes.';
I[3][1][3][1]=':-)';
I[3][1][3][2] = 1;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='A school might use an electronic database to :';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Buy janitorial supplies.';
I[4][1][0][1]='X';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Run the computer system.';
I[4][1][1][1]='X';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='Publish a school newspaper.';
I[4][1][2][1]='X';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Maintain an accurate list of students.';
I[4][1][3][1]=':-)';
I[4][1][3][2] = 1;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='Which is NOT a good example of a useful database?';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Novels.';
I[5][1][0][1]=':-)';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='Electronic dictionaries';
I[5][1][1][1]='X';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='Electronic mailing lists';
I[5][1][2][1]='X';
I[5][1][2][2] = 0;
I[5][1][3] = new Array();
I[5][1][3][0]='Automated library system';
I[5][1][3][1]='X';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Which is *NOT* a benefit of a computerized database?';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Sorts records quickly and accurately';
I[6][1][0][1]='X';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='Communicates with other computers in remote locations';
I[6][1][1][1]=':-)';
I[6][1][1][2] = 1;
I[6][1][2] = new Array();
I[6][1][2][0]='Can help keep accurate records of almost any type';
I[6][1][2][1]='X';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Cam find specific records that match certain conditions';
I[6][1][3][1]='X';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='An advantage of an electronic database have over a paper database is:';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Graphics.';
I[7][1][0][1]='X';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Spell checker.';
I[7][1][1][1]='X';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Speed.';
I[7][1][2][1]=':-)';
I[7][1][2][2] = 1;
I[7][1][3] = new Array();
I[7][1][3][0]='Thesaurus.';
I[7][1][3][1]='X';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='All of the following are possible home uses of a database program EXCEPT:';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Keeping an up to date listing of friends\' phone numbers.';
I[8][1][0][1]='X';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Typing your social studies report.';
I[8][1][1][1]=':-)';
I[8][1][1][2] = 1;
I[8][1][2] = new Array();
I[8][1][2][0]='Categorizing your video and CD collection.';
I[8][1][2][1]='X';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='Organizing your family\'s favorite recipes.';
I[8][1][3][1]='X';
I[8][1][3][2] = 0;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='A computer program that can retrieve specific information from organized data is known as:';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Word processing software.';
I[9][1][0][1]='X';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Desktop Publishing software.';
I[9][1][1][1]='X';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='Database softwarE.';
I[9][1][2][1]=':-)';
I[9][1][2][2] = 1;
I[9][1][3] = new Array();
I[9][1][3][0]='Telecommunications software.';
I[9][1][3][1]='X';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Which statement BEST describes a database program?';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='A source for correct spelling';
I[10][1][0][1]='X';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Used primarily for calculations';
I[10][1][1][1]='X';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='Forecasts and predicts';
I[10][1][2][1]='X';
I[10][1][2][2] = 0;
I[10][1][3] = new Array();
I[10][1][3][0]='Organizes and stores information';
I[10][1][3][1]=':-)';
I[10][1][3][2] = 1;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='An advantage of a database program is:';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='All of the records can be seen at one time.';
I[11][1][0][1]='X';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Data can be added and edited easily.';
I[11][1][1][1]=':-)';
I[11][1][1][2] = 1;
I[11][1][2] = new Array();
I[11][1][2][0]='Records are easily reversible.';
I[11][1][2][1]='X';
I[11][1][2][2] = 0;
I[11][1][3] = new Array();
I[11][1][3][0]='The number of records is limited.';
I[11][1][3][1]='X';
I[11][1][3][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Which is NOT true about database programs?';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='They can be printed.';
I[12][1][0][1]='X';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='They can find information quickly.';
I[12][1][1][1]='X';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='They can only hold up to 100 records.';
I[12][1][2][1]=':-)';
I[12][1][2][2] = 1;
I[12][1][3] = new Array();
I[12][1][3][0]='They are an excellent way to organize information.';
I[12][1][3][1]='X';
I[12][1][3][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='Which of the following is NOT an advantage in using electronic databases?';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Many records on small diskette';
I[13][1][0][1]='X';
I[13][1][0][2] = 0;
I[13][1][1] = new Array();
I[13][1][1][0]='The sort order is easily changed';
I[13][1][1][1]='X';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='A specific record can be found quickly';
I[13][1][2][1]='X';
I[13][1][2][2] = 0;
I[13][1][3] = new Array();
I[13][1][3][0]='Graphing data is accomplished easily';
I[13][1][3][1]=':-)';
I[13][1][3][2] = 1;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='A student might use an electronic database to:';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Keep track of names and addresses of friends.';
I[14][1][0][1]=':-)';
I[14][1][0][2] = 1;
I[14][1][1] = new Array();
I[14][1][1][0]='To write a report.';
I[14][1][1][1]='X';
I[14][1][1][2] = 0;
I[14][1][2] = new Array();
I[14][1][2][0]='To average his or her grades.';
I[14][1][2][1]='X';
I[14][1][2][2] = 0;
I[14][1][3] = new Array();
I[14][1][3][0]='To send an e-mail message.';
I[14][1][3][1]='X';
I[14][1][3][2] = 0;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='One advantage of a database is:';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='They can be easily organized to meet the needs of the user.';
I[15][1][0][1]=':-)';
I[15][1][0][2] = 1;
I[15][1][1] = new Array();
I[15][1][1][0]='They are on all software programs.';
I[15][1][1][1]='X';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='They contain an online dictionary. ';
I[15][1][2][1]='X';
I[15][1][2][2] = 0;
I[15][1][3] = new Array();
I[15][1][3][0]='They contain an online thesaurus.';
I[15][1][3][1]='X';
I[15][1][3][2] = 0;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='An advantage of an electronic telephone book over a printed one is:';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Phone numbers are listed first.';
I[16][1][0][1]='X';
I[16][1][0][2] = 0;
I[16][1][1] = new Array();
I[16][1][1][0]='Names of everyone in your town are listed.';
I[16][1][1][1]='X';
I[16][1][1][2] = 0;
I[16][1][2] = new Array();
I[16][1][2][0]='Names are listed in ascending order.';
I[16][1][2][1]='X';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='The listings (records) can be sorted by any field.';
I[16][1][3][1]=':-)';
I[16][1][3][2] = 1;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='A database allows a computer user to:';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Communicate with an online service.';
I[17][1][0][1]='X';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Organize and store information.';
I[17][1][1][1]=':-)';
I[17][1][1][2] = 1;
I[17][1][2] = new Array();
I[17][1][2][0]='Type a letter to your grandma.';
I[17][1][2][1]='X';
I[17][1][2][2] = 0;
I[17][1][3] = new Array();
I[17][1][3][0]='Produce a newsletter.';
I[17][1][3][1]='X';
I[17][1][3][2] = 0;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='A computerized system in a school media cneter eliminates the need for a:';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Card catalog.';
I[18][1][0][1]=':-)';
I[18][1][0][2] = 1;
I[18][1][1] = new Array();
I[18][1][1][0]='Encyclopedias.';
I[18][1][1][1]='X';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Dictionaries.';
I[18][1][2][1]='X';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='Bookmarks.';
I[18][1][3][1]='X';
I[18][1][3][2] = 0;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='A grocery might use an electronic database to keep track of:';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Operating hours.';
I[19][1][0][1]='X';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='Freezer temperatures.';
I[19][1][1][1]='X';
I[19][1][1][2] = 0;
I[19][1][2] = new Array();
I[19][1][2][0]='Overall inventory.';
I[19][1][2][1]=':-)';
I[19][1][2][2] = 1;
I[19][1][3] = new Array();
I[19][1][3][0]='Graocery carts.';
I[19][1][3][1]='X';
I[19][1][3][2] = 0;
I[19][2] = 0;

I[20] = new Array();
I[20][0]='A travel agent might use a database to:';
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Print vacation brochures.';
I[20][1][0][1]='X';
I[20][1][0][2] = 0;
I[20][1][1] = new Array();
I[20][1][1][0]='Forecast the summer season.';
I[20][1][1][1]='X';
I[20][1][1][2] = 0;
I[20][1][2] = new Array();
I[20][1][2][0]='Get airline schedules for clients.';
I[20][1][2][1]=':-)';
I[20][1][2][2] = 1;
I[20][1][3] = new Array();
I[20][1][3][0]='Communicate with cruise ships.';
I[20][1][3][1]='X';
I[20][1][3][2] = 0;
I[20][2] = 0;

I[21] = new Array();
I[21][0]='An example of an electronic database a student might use is a:';
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='School calendar.';
I[21][1][0][1]='X';
I[21][1][0][2] = 0;
I[21][1][1] = new Array();
I[21][1][1][0]='Student planner.';
I[21][1][1][1]='X';
I[21][1][1][2] = 0;
I[21][1][2] = new Array();
I[21][1][2][0]='Telephone book.';
I[21][1][2][1]=':-)';
I[21][1][2][2] = 1;
I[21][1][3] = new Array();
I[21][1][3][0]='CD-ROM enclyclopedia.';
I[21][1][3][1]='X';
I[21][1][3][2] = 0;
I[21][2] = 0;

I[22] = new Array();
I[22][0]='Who is NOT likely to use a database program on the job?';
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='A teacher storing student information';
I[22][1][0][1]='X';
I[22][1][0][2] = 0;
I[22][1][1] = new Array();
I[22][1][1][0]='A doctor saving patient information';
I[22][1][1][1]='X';
I[22][1][1][2] = 0;
I[22][1][2] = new Array();
I[22][1][2][0]='A bulldozer operator clearing land';
I[22][1][2][1]=':-)';
I[22][1][2][2] = 1;
I[22][1][3] = new Array();
I[22][1][3][0]='A store owner updating inventory.';
I[22][1][3][1]='X';
I[22][1][3][2] = 0;
I[22][2] = 0;

I[23] = new Array();
I[23][0]='A doctor\'s office might use a database to:';
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='Make a diagnosis of a sick patient.';
I[23][1][0][1]='X';
I[23][1][0][2] = 0;
I[23][1][1] = new Array();
I[23][1][1][0]='Keep track of appointments made.';
I[23][1][1][1]=':-)';
I[23][1][1][2] = 1;
I[23][1][2] = new Array();
I[23][1][2][0]='Print all of the employee\'s paychecks.';
I[23][1][2][1]='X';
I[23][1][2][2] = 0;
I[23][1][3] = new Array();
I[23][1][3][0]='Produce purchase orders for new equipment.';
I[23][1][3][1]='X';
I[23][1][3][2] = 0;
I[23][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Homenet Software. Loading...</body></html>';
}

//-->

//]]>

</script>
</head>

<!--<body>Fool those dumb ad-inserting ISPs</body>-->
<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->
<frameset rows="18%,*" onload="StartUp()" framespacing="0" border="0">
  <frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame">
  </frame>
  <frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame">
  </frame>
</frameset>

</html>
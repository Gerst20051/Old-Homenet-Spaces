<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Computer Languages</title>
</head>

<body>

<div align="center">
	<center>
	<table width="100%" border="0" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
		<tr>
			<td width="100%" height="31" style="font-family: Arial, Helvetica, sans-serif; font-size: 12px">
			<h1 align="center"><a name="Top">A Chronology of Influential Computer 
			Languages</a></h1>
			</td>
		</tr>
		<tr>
			<td style="font-family: Arial, Helvetica, sans-serif; font-size: 12px">&nbsp;</td>
		</tr>
		<tr>
			<td style="font-family: Arial, Helvetica, sans-serif; font-size: 12px">
			<div class="Section1">
				<hr size="1">
				<p>Konrad Zuse in Nazi Germany may have developed the first real 
				computer programming language, &quot;Plankalkul&quot; ca. 1945. This is mentioned 
				in the 1978 ACM History of Programming Languages FORTRAN session.
				</p>
				<p>According to Sammet, over 200 programming languages were developed 
				between 1952 and 1972, but she considered only about 13 of them 
				to be significant. </p>
				Here&#39;s a chronological list of computer languages that we consider 
				to have had the most influence.
				<ul>
					<li>1957 FORTRAN </li>
					<li>1958 ALGOL </li>
					<li>1960 LISP </li>
					<li>1960 COBOL </li>
					<li>1962 APL </li>
					<li>1962 SIMULA </li>
					<li>1964 BASIC </li>
					<li>1964 PL/I </li>
					<li>1966 ISWIM </li>
					<li>1970 Prolog </li>
					<li>1972 C </li>
					<li>1975 Pascal </li>
					<li>1975 Scheme </li>
					<li>1977 OPS5 </li>
					<li>1978 CSP </li>
					<li>1978 FP </li>
					<li>1980 dBASE II </li>
					<li>1983 Smalltalk-80 </li>
					<li>1983 Ada </li>
					<li>1983 Parlog </li>
					<li>1984 Standard ML </li>
					<li>1986 C++ </li>
					<li>1986 CLP(R) </li>
					<li>1986 Eiffel </li>
					<li>1988 CLOS </li>
					<li>1988 Mathematica </li>
					<li>1988 Oberon </li>
					<li>1989 HTML </li>
					<li>1990 Haskell </li>
				</ul>
				<p><font color="#0000aa" size="5" face="Arial, Helvetica">Language 
				Categories</font></p>
				<hr size="1">
				<dl>
					<dt><b>Procedural Language</b> </dt>
					<dd>A language which states how to compute the result of a given 
					problem. This term encompasses both imperative and functional 
					languages.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Imperative Language</b> </dt>
					<dd>A language which operates by a sequence of commands that 
					change the value of data elements. Imperative languages are 
					typified by assignments and iteration.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Declarative Language</b> </dt>
					<dd>A language which operates by making descriptive statements 
					about data, and relations between data. The algorithm is hidden 
					in the semantics of the language. This category encompasses 
					both applicative and logic languages. Examples of declarative 
					features are set comprehensions and pattern-matching statements.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Applicative Language</b> </dt>
					<dd>A language that operates by application of functions to 
					values, with no side effects. A functional language in the broad 
					sense.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Functional Language </b></dt>
					<dd>In the narrow sense, a functional language is one that operates 
					by use of higher-order functions, building operators that manipulate 
					functions directly without ever appearing to manipulate data. 
					Example: FP.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Definitional Language</b> </dt>
					<dd>An applicative language containing assignments interpreted 
					as definitions. Example: Lucid.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Single Assignment Language</b> </dt>
					<dd>An applicative language using assignments, with the convention 
					that a variable may appear on the left side of an assignment 
					only once within the portion of the program in which it is active.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Dataflow Language</b> </dt>
					<dd>A language suitable for use on a dataflow architecture. 
					Necessary properties include freedom from side effects, and 
					the equivalence of scheduling constraints with data dependencies. 
					Examples: Val, Id, SISAL, Lucid.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Logic Language</b> </dt>
					<dd>A logic language deals with predicates or relationships 
					p(X,Y). A program consists of a set of Horn clauses which may 
					be:
					<ul>
						<li>facts - p(X,Y) is true </li>
						<li>rules - p is true if q1 and q2 and ... qn are true
						</li>
						<li>queries - is g1 and g2 and ... gn true? (gi&#39;s are the 
						goals.) </li>
					</ul>
					<p>Further clauses are inferred using resolution. One clause 
					is selected containing p as an assumption, another containing 
					p as a consequence, and p is eliminated between them. If the 
					two p&#39;s have different arguments they must be unified, using 
					the substitution with the fewest constraints that makes them 
					the same. Logic languages try alternative resolutions for each 
					goal in succession, backtracking in a search for a common solution.
					</p>
					<ul>
						<li>OR-parallel logic languages try alternative resolutions 
						in parallel </li>
						<li>AND-parallel logic languages try to satisfy several 
						goals in parallel. </li>
					</ul>
					<p>&nbsp;</p>
					</dd>
					<dt><b>Constraint Language</b> </dt>
					<dd>A language in which a problem is specified and solved by 
					a series of constraining relationships.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Object-Oriented Language</b> </dt>
					<dd>A language in which data and the functions which access 
					it are treated as a unit.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Concurrent Language</b> </dt>
					<dd>A concurrent language describes programs that may be executed 
					in parallel. This may be either
					<ul>
						<li>Multiprogramming: sharing one processor </li>
						<li>Multiprocessing: separate processors sharing one memory
						</li>
						<li>Distributed </li>
					</ul>
					<p>Concurrent languages differ in the way that processes are 
					created: </p>
					<ul>
						<li>Coroutines - control is explicitly transferred - examples 
						are Simula I, SL5, BLISS and Modula-2. </li>
						<li>Fork/join - examples are PL/I and Mesa. </li>
						<li>Cobegin/coend - examples are ALGOL 68, CSP, Edison, 
						Argus. </li>
						<li>Process declarations - examples are DP, SR, Concurrent 
						Pascal, Modula, PLITS and Ada. </li>
					</ul>
					<p>and the ways in which processes interact: </p>
					<ul>
						<li>Semaphores - ALGOL 68 </li>
						<li>Conditional critical regions - Edison, DP, Argus
						</li>
						<li>Monitors - Concurrent Pascal, Modula </li>
						<li>Message passing - CSP, PLITS, Gypsy, Actors </li>
						<li>Remote procedure calls - DP, *Mod
						<ul>
							<li>Rendezvous - Ada, SR </li>
							<li>Atomic transactions - Argus </li>
						</ul>
						</li>
					</ul>
					<p>&nbsp;</p>
					</dd>
					<dt><b>Fourth Generation Language (4GL)</b> </dt>
					<dd>A very high-level language. It may use natural English or 
					visual constructs. Algorithms or data structures may be selected 
					by the compiler.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Query Language</b> </dt>
					<dd>An interface to a database.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Specification Language</b> </dt>
					<dd>A formalism for expressing a hardware or software design.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Assembly Language</b> </dt>
					<dd>A symbolic representation of the machine language of a specific 
					computer.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Intermediate Language</b> </dt>
					<dd>A language used as an intermediate stage in compilation. 
					May be either text or binary.
					<p>&nbsp;</p>
					</dd>
					<dt><b>Metalanguage</b> </dt>
					<dd>A language used for the formal description of another language.
					</dd>
					<dt>&nbsp;</dt>
				</dl>
				<p><font color="#0000aa" size="5" face="Arial, Helvetica">Dialects, 
				Variants, Versions and Implementations</font></p>
				<hr size="1">
				<p>Computer languages evolve, and are related to one another in 
				rather complex ways. Almost every language can be regarded as an 
				improved version of something else. Sometimes it&#39;s hard to know 
				where to draw the line and say, &quot;This is a separate language&quot;.
				</p>
				<p>LISP is a prime example. What started out as a single language 
				has evolved into a large family of languages with complex relationships.
				</p>
				<p><b>Fine Distinctions</b> </p>
				<p>Generally, we can distinguish: </p>
				<dl>
					<dd><b>Dialects</b>, such as Scheme and Common LISP. </dd>
					<dt>&nbsp; </dt>
					<dd>Dialects have major differences, and are certainly considered 
					by their users to be distinct languages. </dd>
					<dd>&nbsp;</dd>
					<dt><b>Variants</b>, such as Kyoto Common LISP and Allegro CL.
					</dt>
					<dd>&nbsp;</dd>
					<dd>Variants are intended to be the same, but have certain features 
					which make them incompatible. Variants are often the result 
					of commercial products offered by different vendors. </dd>
					<dt>&nbsp;</dt>
					<dt><b>Versions</b>, such as the Scheme revisions RRS, R2RS, 
					R3RS and R4RS. </dt>
					<dd>&nbsp;</dd>
					<dd>Versions arise as a language matures. A series of revisions 
					will be issued, causing small changes in the language. </dd>
					<dt>&nbsp;</dt>
					<dt><b>Implementations</b> </dt>
					<dd>&nbsp;</dd>
					<dd>Implementations are designed to run on particular machines 
					or operating systems, and will usually have special features 
					added to take advantage of their environment. </dd>
				</dl>
				As an extreme, it has been suggested that if command line options 
				are present, each choice of options could be considered a distinct 
				language.
				<p><b>By Any Other Name</b> </p>
				<p>A language&#39;s name is not always an accurate guide to its identity.
				</p>
				<ul>
					<li>Sometimes a language will undergo significant evolution 
					without any official change in name (e.g. SETL2 has done this).
					</li>
					<li>Sometimes just the name will change (IAL to ALGOL to ALGOL 
					58). </li>
					<li>In many cases the same name has been used for several distinct 
					languages (e.g. Vulcan). </li>
				</ul>
				<p><b>What&#39;s In, And What&#39;s Out?</b></p>
				<p>It may also be debatable what features are to be included in 
				the definition of a language and what are to be regarded as external 
				features. </p>
				<ul>
					<li>For example SML is defined in stages: a &quot;core syntax&quot; surrounded 
					by a set of standard extensions. Technically that makes it two 
					separate languages. </li>
					<li>Other languages have purposely omitted essential features 
					(like I/O) from their definition, either because they were never 
					intended to be used without a standard library (C) or interface 
					(Smalltalk-80), or because they constitute the command language 
					for a particular product or system. </li>
					<li>Still other languages are by their very nature extensible. 
					The large number of macro packages built on TeX for example 
					could be called an endless list of separate &quot;languages&quot;.
					</li>
				</ul>
				<p><b>Brand Names</b></p>
				<p>You might wonder why we do include in this list a number of commercial 
				products such as Visual C++. Usually these items offer non-standard 
				extensions to the base language. This was particularly true in the 
				varieties of BASIC and Prolog. One could argue that in a strict 
				sense Microsoft C and Borland C for example are distinct languages.
				<br>
				Another reason for including entries of this type is that many languages 
				are proprietary, appearing only in a certain product. Such languages 
				may be distinctive and interesting, and deserve to be here. On the 
				other hand we don&#39;t want the list to become a catalog of commercial 
				programming products. </p>
			</div>
			</td>
		</tr>
	</table>
	</center></div>
<p align="center"><a href="../../index.html">Home</a> - <a href="Index.html">Computers</a> 
- <a href="#Top">Top</a></p>

</body>

</html>

<html>

<head>
<title>Database Terms</title>
<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = Temp.substring(sLoc,z);
		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Database Terms';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question.'; //'';
var ShuffleQs = false;
var ShuffleAs = false;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 25;
var ShowOneByOne = true;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';



var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='To make a database of your friends\' addresses that could be sorted by their last names, you would need to make "Last Name":';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='A record.';
I[0][1][0][1]='X';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='A field.';
I[0][1][1][1]=':-)';
I[0][1][1][2] = 1;
I[0][1][2] = new Array();
I[0][1][2][0]='An entry.';
I[0][1][2][1]='X';
I[0][1][2][2] = 0;
I[0][1][3] = new Array();
I[0][1][3][0]='An order.';
I[0][1][3][1]='X';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='An example of a computerized database program found in a school would be:';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='A typing tutor program.';
I[1][1][0][1]='X';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='A math program in the computer lab.';
I[1][1][1][1]='X';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='A storybook CD used in kindergarten.';
I[1][1][2][1]='X';
I[1][1][2][2] = 0;
I[1][1][3] = new Array();
I[1][1][3][0]='An automated card catalog system in the media center.';
I[1][1][3][1]=':-)';
I[1][1][3][2] = 1;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='A collection of related information is known as a:';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Spreadsheet';
I[2][1][0][1]='X';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='Document';
I[2][1][1][1]='X';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Record';
I[2][1][2][1]='X';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='Database';
I[2][1][3][1]=':-)';
I[2][1][3][2] = 1;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='In an electronic database, all the information about one subject is called:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Data.';
I[3][1][0][1]='X';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='A record.';
I[3][1][1][1]=':-)';
I[3][1][1][2] = 1;
I[3][1][2] = new Array();
I[3][1][2][0]='A field.';
I[3][1][2][1]='X';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='Information.';
I[3][1][3][1]='X';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='One piece or item of information in a database is known as a/an:';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Record.';
I[4][1][0][1]='X';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Entry.';
I[4][1][1][1]=':-)';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='File.';
I[4][1][2][1]='X';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Field.';
I[4][1][3][1]='X';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='What term applies to a collection of related records in a database?';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Field';
I[5][1][0][1]='X';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='Clipboard';
I[5][1][1][1]='X';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='File';
I[5][1][2][1]=':-)';
I[5][1][2][2] = 1;
I[5][1][3] = new Array();
I[5][1][3][0]='Form';
I[5][1][3][1]='X';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='All of the following terms are related to databases EXCEPT for:';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Entry.';
I[6][1][0][1]='X';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='Data.';
I[6][1][1][1]='X';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Search.';
I[6][1][2][1]='X';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Character retrievel.';
I[6][1][3][1]=':-)';
I[6][1][3][2] = 1;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='To put data in a particular order, what operation should you perform?';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Search';
I[7][1][0][1]='X';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Retrieve';
I[7][1][1][1]='X';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Sort';
I[7][1][2][1]=':-)';
I[7][1][2][2] = 1;
I[7][1][3] = new Array();
I[7][1][3][0]='Quest';
I[7][1][3][1]='X';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='The mathematical operator meaning less than is written as:';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='>';
I[8][1][0][1]='X';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='=<';
I[8][1][1][1]='X';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='=\\';
I[8][1][2][1]='X';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='<';
I[8][1][3][1]=':-)';
I[8][1][3][2] = 1;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='The mathematical operator that means the same as "equal to or greater than" is written as:';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='=>';
I[9][1][0][1]=':-)';
I[9][1][0][2] = 1;
I[9][1][1] = new Array();
I[9][1][1][0]='=+';
I[9][1][1][1]='X';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='=&';
I[9][1][2][1]='X';
I[9][1][2][2] = 0;
I[9][1][3] = new Array();
I[9][1][3][0]='=<';
I[9][1][3][1]='X';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='What item would serve the same purpose as a database?';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Copier';
I[10][1][0][1]='X';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Fax machine';
I[10][1][1][1]='X';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='Telephone';
I[10][1][2][1]=':-)';
I[10][1][2][2] = 1;
I[10][1][3] = new Array();
I[10][1][3][0]='File cabinet';
I[10][1][3][1]='X';
I[10][1][3][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='A set of related records in a database is known as a:';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='File.';
I[11][1][0][1]=':-)';
I[11][1][0][2] = 1;
I[11][1][1] = new Array();
I[11][1][1][0]='Entry.';
I[11][1][1][1]='X';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Field';
I[11][1][2][1]='X';
I[11][1][2][2] = 0;
I[11][1][3] = new Array();
I[11][1][3][0]='Record';
I[11][1][3][1]='X';
I[11][1][3][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Last name, first name and phone number are all examples of:';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Entries.';
I[12][1][0][1]='X';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Records.';
I[12][1][1][1]='X';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Data.';
I[12][1][2][1]='X';
I[12][1][2][2] = 0;
I[12][1][3] = new Array();
I[12][1][3][0]='Fields.';
I[12][1][3][1]=':-)';
I[12][1][3][2] = 1;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='Students lined up from the youngest to the oldest would be an example of what sort order?';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Criterion order';
I[13][1][0][1]='X';
I[13][1][0][2] = 0;
I[13][1][1] = new Array();
I[13][1][1][0]='Numerical order';
I[13][1][1][1]='X';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='Ascending order';
I[13][1][2][1]=':-)';
I[13][1][2][2] = 1;
I[13][1][3] = new Array();
I[13][1][3][0]='Descending order';
I[13][1][3][1]='X';
I[13][1][3][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='If books are organized from the most expensive to the cheapest, what is the sort order?';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Criterion order';
I[14][1][0][1]='X';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Numerical order';
I[14][1][1][1]='X';
I[14][1][1][2] = 0;
I[14][1][2] = new Array();
I[14][1][2][0]='Ascending order';
I[14][1][2][1]='X';
I[14][1][2][2] = 0;
I[14][1][3] = new Array();
I[14][1][3][0]='Descending order';
I[14][1][3][1]=':-)';
I[14][1][3][2] = 1;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='To find a specific entry in a record, what method would you use?';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='Sorting';
I[15][1][0][1]='X';
I[15][1][0][2] = 0;
I[15][1][1] = new Array();
I[15][1][1][0]='Searching';
I[15][1][1][1]='X';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='Questing';
I[15][1][2][1]='X';
I[15][1][2][2] = 0;
I[15][1][3] = new Array();
I[15][1][3][0]='Finding';
I[15][1][3][1]=':-)';
I[15][1][3][2] = 1;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='The four parts of a database listed in ascending order are:';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='File , record, field, entry.';
I[16][1][0][1]='X';
I[16][1][0][2] = 0;
I[16][1][1] = new Array();
I[16][1][1][0]='Entry, field, record, file.';
I[16][1][1][1]=':-)';
I[16][1][1][2] = 1;
I[16][1][2] = new Array();
I[16][1][2][0]='Entry, field, file, record.';
I[16][1][2][1]='X';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='File, field, entry, record.';
I[16][1][3][1]='X';
I[16][1][3][2] = 0;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='The software used to organize large amounts of data is:';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Programming.';
I[17][1][0][1]='X';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Spreadsheet.';
I[17][1][1][1]='X';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='Word Processing.';
I[17][1][2][1]='X';
I[17][1][2][2] = 0;
I[17][1][3] = new Array();
I[17][1][3][0]='Database.';
I[17][1][3][1]=':-)';
I[17][1][3][2] = 1;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='In a database, an ascending sort means:';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Putting data in A to Z order.';
I[18][1][0][1]=':-)';
I[18][1][0][2] = 1;
I[18][1][1] = new Array();
I[18][1][1][0]='Putting data in Z to A order.';
I[18][1][1][1]='X';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Putting data in reverse number order.';
I[18][1][2][1]='X';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='Putting data in a search order.';
I[18][1][3][1]='X';
I[18][1][3][2] = 0;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='A group of related fields is known as:';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Data.';
I[19][1][0][1]='X';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='Characters.';
I[19][1][1][1]='X';
I[19][1][1][2] = 0;
I[19][1][2] = new Array();
I[19][1][2][0]='A file.';
I[19][1][2][1]='X';
I[19][1][2][2] = 0;
I[19][1][3] = new Array();
I[19][1][3][0]='A record.';
I[19][1][3][1]=':-)';
I[19][1][3][2] = 1;
I[19][2] = 0;

I[20] = new Array();
I[20][0]='A group of fields in a database is known as a:';
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Record.';
I[20][1][0][1]=':-)';
I[20][1][0][2] = 1;
I[20][1][1] = new Array();
I[20][1][1][0]='Character.';
I[20][1][1][1]='X';
I[20][1][1][2] = 0;
I[20][1][2] = new Array();
I[20][1][2][0]='File.';
I[20][1][2][1]='X';
I[20][1][2][2] = 0;
I[20][1][3] = new Array();
I[20][1][3][0]='Folder.';
I[20][1][3][1]='X';
I[20][1][3][2] = 0;
I[20][2] = 0;

I[21] = new Array();
I[21][0]='Information in a database is divided into:';
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='Lists.';
I[21][1][0][1]='X';
I[21][1][0][2] = 0;
I[21][1][1] = new Array();
I[21][1][1][0]='Entries.';
I[21][1][1][1]='X';
I[21][1][1][2] = 0;
I[21][1][2] = new Array();
I[21][1][2][0]='Data bites.';
I[21][1][2][1]='X';
I[21][1][2][2] = 0;
I[21][1][3] = new Array();
I[21][1][3][0]='Fields.';
I[21][1][3][1]=':-)';
I[21][1][3][2] = 1;
I[21][2] = 0;

I[22] = new Array();
I[22][0]='Items sorted in descending order would be in:';
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='Z to A alphabetical order.';
I[22][1][0][1]=':-)';
I[22][1][0][2] = 1;
I[22][1][1] = new Array();
I[22][1][1][0]='A to Z alphabetical order.';
I[22][1][1][1]='X';
I[22][1][1][2] = 0;
I[22][1][2] = new Array();
I[22][1][2][0]='Search numerical order.';
I[22][1][2][1]='X';
I[22][1][2][2] = 0;
I[22][1][3] = new Array();
I[22][1][3][0]='Connecting order.';
I[22][1][3][1]='X';
I[22][1][3][2] = 0;
I[22][2] = 0;

I[23] = new Array();
I[23][0]='An example of a connector is:';
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='Quest.';
I[23][1][0][1]='X';
I[23][1][0][2] = 0;
I[23][1][1] = new Array();
I[23][1][1][0]='Possible.';
I[23][1][1][1]='X';
I[23][1][1][2] = 0;
I[23][1][2] = new Array();
I[23][1][2][0]='And.';
I[23][1][2][1]=':-)';
I[23][1][2][2] = 1;
I[23][1][3] = new Array();
I[23][1][3][0]='Sometimes.';
I[23][1][3][1]='X';
I[23][1][3][2] = 0;
I[23][2] = 0;

I[24] = new Array();
I[24][0]='A field is the proper term used to describe:';
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='A set of characters typed in a record.';
I[24][1][0][1]='X';
I[24][1][0][2] = 0;
I[24][1][1] = new Array();
I[24][1][1][0]='A category of information.';
I[24][1][1][1]=':-)';
I[24][1][1][2] = 1;
I[24][1][2] = new Array();
I[24][1][2][0]='A method of sorting.';
I[24][1][2][1]='X';
I[24][1][2][2] = 0;
I[24][1][3] = new Array();
I[24][1][3][0]='All of the entries combined together.';
I[24][1][3][1]='X';
I[24][1][3][2] = 0;
I[24][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Homenet Software. Loading...</body></html>';
}
//-->

//]]>

</script>
</head>

<!--<body>Fool those dumb ad-inserting ISPs</body>-->
<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->
<frameset rows="18%,*" onload="StartUp()" framespacing="0" border="0">
  <frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame">
  </frame>
  <frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame">
  </frame>
</frameset>

</html>